{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","api/backend.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","get_visited_path","credentials","a","axios","post","rows","columns","obstacles","start_x","start_y","target_x","target_y","algorithm","res","data","console","log","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","push","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","distanceToFinishNode","Math","abs","isVisited","previousNode","isNode","grid","mouseIsPressed","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","clearGrid","node","nodeClassName","slice","algo","x","length","y","requestHandler","visited","path","visited_formatted","path_formatted","i","newNode","previous_visited_node","previous_path_node","animate","visitedNodesInOrder","nodesInShortestPathOrder","setTimeout","animateShortestPath","href","src","alt","style","width","height","type","onClick","visualize","clearWalls","onMouseLeave","map","rowIndex","key","nodeIndex","handleMouseEnter","handleMouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yWAIqBA,G,uLACT,IAAD,EAUHC,KAAKC,MARPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,QACAC,EALK,EAKLA,OACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,aACAC,EARK,EAQLA,UACAC,EATK,EASLA,IAGIC,EAAiBP,EACnB,cACAC,EACA,aACAC,EACA,YACA,GAEJ,OACE,wBACEM,GAAE,eAAUF,EAAV,YAAiBP,GACnBU,UAAS,eAAUF,GACnBJ,YAAa,kBAAMA,EAAYG,EAAKP,IACpCK,aAAc,kBAAMA,EAAaE,EAAKP,IACtCM,UAAW,kBAAMA,W,GA3BSK,c,QCF3B,SAAeC,EAAtB,kC,4CAAO,WAAgCC,GAAhC,eAAAC,EAAA,+EAEeC,IAAMC,KAAK,oCAAqC,CAChEC,KAAMJ,EAAYI,KAClBC,QAASL,EAAYK,QACrBC,UAAWN,EAAYM,UACvBC,QAASP,EAAYO,QACrBC,QAASR,EAAYQ,QACrBC,SAAUT,EAAYS,SACtBC,SAAUV,EAAYU,SACtBC,UAAWX,EAAYW,YAVtB,cAEGC,EAFH,yBAaIA,EAAIC,MAbR,gCAeHC,QAAQC,IAAR,MAfG,0D,8PCKcC,E,YACnB,aAAe,IAAD,8BACZ,+CAgCFC,eAAiB,WAKf,IAFI,IAFJC,EAEG,uDAFQ,EAAKC,MAAMC,UACtBC,EACG,uDADQ,EAAKF,MAAMG,aAEhBC,EAAc,GACX7B,EAAM,EAAGA,EAAMwB,EAAUxB,IAAO,CAEvC,IADA,IAAM8B,EAAa,GACVrC,EAAM,EAAGA,EAAMkC,EAAUlC,IAChCqC,EAAWC,KAAK,EAAKC,WAAWhC,EAAKP,IAEvCoC,EAAYE,KAAKD,GAEnB,OAAOD,GA7CK,EAgDdG,WAAa,SAAChC,EAAKP,GACjB,MAAO,CACLO,MACAP,MACAE,QACEK,IAAQ,EAAKyB,MAAMQ,gBAAkBxC,IAAQ,EAAKgC,MAAMS,eAC1DxC,SACEM,IAAQ,EAAKyB,MAAMU,iBACnB1C,IAAQ,EAAKgC,MAAMW,gBACrBC,SAAUC,IACVC,qBACEC,KAAKC,IAAI,EAAKhB,MAAMU,gBAAkBnC,GACtCwC,KAAKC,IAAI,EAAKhB,MAAMW,gBAAkB3C,GACxCiD,WAAW,EACX9C,QAAQ,EACR+C,aAAc,KACdC,QAAQ,IA9DV,EAAKnB,MAAQ,CACXoB,KAAM,GACNZ,eAAgB,EAChBE,gBAAiB,EACjBD,eAAgB,EAChBE,gBAAiB,GACjBU,gBAAgB,EAChBpB,UAAW,GACXE,aAAc,GACdmB,WAAW,EACXC,aAAa,EACbC,cAAc,EACdC,YAAY,EACZC,QAAS,EACTC,QAAS,GAGX,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBArBX,E,iFAyBZ,IAAMT,EAAOtD,KAAKgC,iBAClBhC,KAAKkE,SAAS,CAACZ,W,wCAIftD,KAAKkE,SAAS,CAACV,WAAYxD,KAAKkC,MAAMsB,c,sCAsCxB/C,EAAKP,GACnB,IAAKF,KAAKkC,MAAMsB,UACd,GAAIxD,KAAKmE,cACP,GAEE,oBADAC,SAASC,eAAT,eAAgC5D,EAAhC,YAAuCP,IAAOU,UAG9CZ,KAAKkE,SAAS,CACZX,gBAAgB,EAChBE,aAAa,EACbG,QAASnD,EACToD,QAAS3D,SAEN,GAEL,qBADAkE,SAASC,eAAT,eAAgC5D,EAAhC,YAAuCP,IAAOU,UAG9CZ,KAAKkE,SAAS,CACZX,gBAAgB,EAChBG,cAAc,EACdE,QAASnD,EACToD,QAAS3D,QAEN,CACL,IAAMoE,EAAUC,EAA0BvE,KAAKkC,MAAMoB,KAAM7C,EAAKP,GAChEF,KAAKkE,SAAS,CACZZ,KAAMgB,EACNf,gBAAgB,EAChBI,YAAY,EACZC,QAASnD,EACToD,QAAS3D,SAIbF,KAAKwE,c,oCAKI,IAAD,uBACZ,YAAkBxE,KAAKkC,MAAMoB,KAA7B,+CAAmC,CAAC,IAAzB7C,EAAwB,+BACjC,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdgE,EAAa,QAChBC,EAAgBN,SAASC,eAAT,eACZI,EAAKhE,IADO,YACAgE,EAAKvE,MACzBU,UACF,GACoB,sBAAlB8D,GACkB,4BAAlBA,EAEA,OAAO,GATsB,oFADvB,kFAcZ,OAAO,I,uCAGQjE,EAAKP,GACpB,IAAKF,KAAKkC,MAAMsB,WACVxD,KAAKkC,MAAMqB,eAAgB,CAC7B,IAAMmB,EAAgBN,SAASC,eAAT,eAAgC5D,EAAhC,YAAuCP,IAC1DU,UACH,GAAIZ,KAAKkC,MAAMuB,YAAa,CAC1B,GAAsB,mBAAlBiB,EACoB1E,KAAKkC,MAAMoB,KAAKtD,KAAKkC,MAAM0B,SAC/C5D,KAAKkC,MAAM2B,SAECzD,SAAU,EACxBgE,SAASC,eAAT,eACUrE,KAAKkC,MAAM0B,QADrB,YACgC5D,KAAKkC,MAAM2B,UACzCjD,UAAY,OAEdZ,KAAKkE,SAAS,CAACN,QAASnD,EAAKoD,QAAS3D,IAChBF,KAAKkC,MAAMoB,KAAK7C,GAAKP,GAC7BE,SAAU,EACxBgE,SAASC,eAAT,eAAgC5D,EAAhC,YAAuCP,IAAOU,UAC5C,kBAEJZ,KAAKkE,SAAS,CAACxB,eAAgBjC,EAAKkC,eAAgBzC,SAC/C,GAAIF,KAAKkC,MAAMwB,aAAc,CAClC,GAAsB,mBAAlBgB,EACqB1E,KAAKkC,MAAMoB,KAAKtD,KAAKkC,MAAM0B,SAChD5D,KAAKkC,MAAM2B,SAEE1D,UAAW,EAC1BiE,SAASC,eAAT,eACUrE,KAAKkC,MAAM0B,QADrB,YACgC5D,KAAKkC,MAAM2B,UACzCjD,UAAY,OAEdZ,KAAKkE,SAAS,CAACN,QAASnD,EAAKoD,QAAS3D,IACfF,KAAKkC,MAAMoB,KAAK7C,GAAKP,GAC7BC,UAAW,EAC1BiE,SAASC,eAAT,eAAgC5D,EAAhC,YAAuCP,IAAOU,UAC5C,mBAEJZ,KAAKkE,SAAS,CAACtB,gBAAiBnC,EAAKoC,gBAAiB3C,SACjD,GAAIF,KAAKkC,MAAMyB,WAAY,CAChC,IAAMW,EAAUC,EAA0BvE,KAAKkC,MAAMoB,KAAM7C,EAAKP,GAChEF,KAAKkE,SAAS,CAACZ,KAAMgB,Q,oCAMf7D,EAAKP,GACjB,IAAKF,KAAKkC,MAAMsB,UAAW,CAEzB,GADAxD,KAAKkE,SAAS,CAACX,gBAAgB,IAC3BvD,KAAKkC,MAAMuB,YAAa,CAC1B,IAAMA,GAAezD,KAAKkC,MAAMuB,YAChCzD,KAAKkE,SAAS,CAACT,cAAaf,eAAgBjC,EAAKkC,eAAgBzC,SAC5D,GAAIF,KAAKkC,MAAMwB,aAAc,CAClC,IAAMA,GAAgB1D,KAAKkC,MAAMwB,aACjC1D,KAAKkE,SAAS,CACZR,eACAd,gBAAiBnC,EACjBoC,gBAAiB3C,IAGrBF,KAAKgC,oB,yCAKP,GAAIhC,KAAKkC,MAAMuB,YAAa,CAC1B,IAAMA,GAAezD,KAAKkC,MAAMuB,YAChCzD,KAAKkE,SAAS,CAACT,cAAaF,gBAAgB,SACvC,GAAIvD,KAAKkC,MAAMwB,aAAc,CAClC,IAAMA,GAAgB1D,KAAKkC,MAAMwB,aACjC1D,KAAKkE,SAAS,CAACR,eAAcH,gBAAgB,SACxC,GAAIvD,KAAKkC,MAAMyB,WAAY,CAChC,IAAMA,GAAc3D,KAAKkC,MAAMyB,WAC/B3D,KAAKkE,SAAS,CAACP,aAAYJ,gBAAgB,IAC3CvD,KAAKgC,oB,kCAKP,IAAKhC,KAAKkC,MAAMsB,UAAW,CACzB,IAAMc,EAAUtE,KAAKkC,MAAMoB,KAAKqB,QADP,uBAEzB,YAAkBL,EAAlB,+CAA2B,CAAC,IAAjB7D,EAAgB,+BACzB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdgE,EAAa,QAClBC,EAAgBN,SAASC,eAAT,eACVI,EAAKhE,IADK,YACEgE,EAAKvE,MACzBU,UAEkB,oBAAlB8D,GACkB,qBAAlBA,GACkB,mBAAlBA,IAEAN,SAASC,eAAT,eAAgCI,EAAKhE,IAArC,YAA4CgE,EAAKvE,MAAOU,UACtD,OACF6D,EAAKtB,WAAY,EACjBsB,EAAK3B,SAAWC,IAChB0B,EAAKzB,qBACHC,KAAKC,IAAIlD,KAAKkC,MAAMU,gBAAkB6B,EAAKhE,KAC3CwC,KAAKC,IAAIlD,KAAKkC,MAAMW,gBAAkB4B,EAAKvE,MAEzB,qBAAlBwE,IACFD,EAAKtB,WAAY,EACjBsB,EAAK3B,SAAWC,IAChB0B,EAAKzB,qBAAuB,GAER,oBAAlB0B,IACFD,EAAKtB,WAAY,EACjBsB,EAAK3B,SAAWC,IAChB0B,EAAKzB,qBACHC,KAAKC,IAAIlD,KAAKkC,MAAMU,gBAAkB6B,EAAKhE,KAC3CwC,KAAKC,IAAIlD,KAAKkC,MAAMW,gBAAkB4B,EAAKvE,KAC7CuE,EAAKrE,SAAU,EACfqE,EAAKpE,QAAS,EACdoE,EAAKrB,aAAe,KACpBqB,EAAKpB,QAAS,IAhCO,oFAFF,sF,mCA0C3B,IAAKrD,KAAKkC,MAAMsB,UAAW,CACzB,IAAMc,EAAUtE,KAAKkC,MAAMoB,KAAKqB,QADP,uBAEzB,YAAkBL,EAAlB,+CAA2B,CAAC,IAAjB7D,EAAgB,+BACzB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdgE,EAAa,QAIA,mBAHFL,SAASC,eAAT,eACVI,EAAKhE,IADK,YACEgE,EAAKvE,MACzBU,YAEAwD,SAASC,eAAT,eAAgCI,EAAKhE,IAArC,YAA4CgE,EAAKvE,MAAOU,UACtD,OACF6D,EAAKpE,QAAS,IARO,oFAFF,sF,gCAiBnBuE,GACR,IAAK5E,KAAKkC,MAAMsB,UAAW,CACzBxD,KAAKwE,YACLxE,KAAKiE,kBAKL,IAPyB,IAGjBX,EAAStD,KAAKkC,MAAdoB,KAEFjC,EAAY,GAETwD,EAAI,EAAGA,GAAKvB,EAAKwB,OAAQD,IAChC,IAAK,IAAIE,EAAI,EAAGA,GAAKzB,EAAK,GAAGwB,OAAQC,IAC/BzB,EAAKuB,EAAI,GAAGE,EAAI,GAAG1E,QACrBgB,EAAUmB,KAAK,CAACqC,IAAGE,MAKzB,IAAMnD,EAAO,CACXT,KAAMnB,KAAKkC,MAAMC,UACjBf,QAASpB,KAAKkC,MAAMG,aACpBhB,UAAWA,EACXC,QAAStB,KAAKkC,MAAMQ,eAAiB,EACrCnB,QAASvB,KAAKkC,MAAMS,eAAiB,EACrCnB,SAAUxB,KAAKkC,MAAMU,gBAAkB,EACvCnB,SAAUzB,KAAKkC,MAAMW,gBAAkB,EACvCnB,UAAWkD,GAGb5E,KAAKgF,eAAepD,M,8EAIHA,G,oHAEed,EAAiBc,G,OAOjD,I,SAPQqD,E,EAAAA,QAASC,E,EAAAA,KAEbC,EAAoB,GACpBC,EAAiB,GAIZC,EAAI,EAAGA,EAAIJ,EAAQH,OAAQO,IAC9BC,EAAUtF,KAAKyC,WAAWwC,EAAQI,GAAG,GAAK,EAAGJ,EAAQI,GAAG,GAAK,GACvD,IAANA,IACFC,EAAQlC,aAAemC,GAEzBA,EAAwBD,EACxBH,EAAkB3C,KAAK8C,GAGzB,IAASD,EAAI,EAAGA,EAAIH,EAAKJ,OAAQO,IAC3BC,EAAUtF,KAAKyC,WAAWyC,EAAKG,GAAG,GAAK,EAAGH,EAAKG,GAAG,GAAK,GACjD,IAANA,IACFC,EAAQlC,aAAeoC,GAEzBA,EAAqBF,EACrBF,EAAe5C,KAAK8C,GAEtBF,EAAe5C,KAAK,OAEpBxC,KAAKyF,QAAQN,EAAmBC,G,kDAEhCvD,QAAQC,IAAR,M,+IAII4D,EAAqBC,GAC3B,IADsD,IAAD,kBAC5CN,GACP,GAAIA,IAAMK,EAAoBZ,OAI5B,OAHAc,YAAW,WACT,EAAKC,oBAAoBF,KACxB,GAAKN,GACF,CAAN,UAEFO,YAAW,WACT,IAAMnB,EAAOiB,EAAoBL,GAC3BX,EAAgBN,SAASC,eAAT,eACZI,EAAKhE,IADO,YACAgE,EAAKvE,MACzBU,UAEkB,oBAAlB8D,GACkB,qBAAlBA,IAEAN,SAASC,eAAT,eAAgCI,EAAKhE,IAArC,YAA4CgE,EAAKvE,MAAOU,UACtD,uBAEH,GAAKyE,IAnBDA,EAAI,EAAGA,GAAKK,EAAoBZ,OAAQO,IAAK,CAAC,IAAD,IAA7CA,GAA6C,qC,0CAuBpCM,GAClB,IAD6C,IAAD,kBACnCN,GAC6B,QAAhCM,EAAyBN,GAC3BO,YAAW,WACT,EAAK3B,oBACA,GAAJoB,GAEHO,YAAW,WACT,IAAMnB,EAAOkB,EAAyBN,GAChCX,EAAgBN,SAASC,eAAT,eACZI,EAAKhE,IADO,YACAgE,EAAKvE,MACzBU,UAEkB,oBAAlB8D,GACkB,qBAAlBA,IAEAN,SAASC,eAAT,eAAgCI,EAAKhE,IAArC,YAA4CgE,EAAKvE,MAAOU,UACtD,6BAEC,GAAJyE,IAlBEA,EAAI,EAAGA,EAAIM,EAAyBb,OAAQO,IAAM,EAAlDA,K,+BAuBD,IAAD,SACwBrF,KAAKkC,MAA7BoB,EADA,EACAA,KAAMC,EADN,EACMA,eACb,OACE,6BACE,yBAAK3C,UAAU,gDACb,uBAAGA,UAAU,eAAekF,KAAK,KAC/B,sDAEF,yBAAKlF,UAAU,2BAA2BD,GAAG,aAC3C,wBAAIC,UAAU,cACZ,wBAAIA,UAAU,YACZ,uBACEA,UAAU,WACVkF,KAAK,mDACJ,IAHH,cAGmB,IACjB,yBACEC,IAAI,wEACJC,IAAI,cACJC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,eAO5C,6BACA,4BACEC,KAAK,SACLxF,UAAU,kBACVyF,QAAS,kBAAM,EAAKC,UAAU,cAHhC,cAMA,4BACEF,KAAK,SACLxF,UAAU,kBACVyF,QAAS,kBAAM,EAAKC,UAAU,WAHhC,MAMA,4BACEF,KAAK,SACLxF,UAAU,kBACVyF,QAAS,kBAAM,EAAKC,UAAU,SAHhC,wBAMA,4BACEF,KAAK,SACLxF,UAAU,kBACVyF,QAAS,kBAAM,EAAKC,UAAU,SAHhC,sBAMA,4BACEF,KAAK,SACLxF,UAAU,kBACVyF,QAAS,kBAAM,EAAKE,eAHtB,eAMA,4BACEH,KAAK,SACLxF,UAAU,iBACVyF,QAAS,kBAAM,EAAK7B,cAHtB,cAMA,2BACE5D,UAAU,iBACV4F,aAAc,kBAAM,EAAKxC,qBACzB,2BAAOpD,UAAU,QACd0C,EAAKmD,KAAI,SAAChG,EAAKiG,GACd,OACE,wBAAIC,IAAKD,GACNjG,EAAIgG,KAAI,SAAChC,EAAMmC,GAAe,IACtBnG,EAAuCgE,EAAvChE,IAAKP,EAAkCuE,EAAlCvE,IAAKC,EAA6BsE,EAA7BtE,SAAUC,EAAmBqE,EAAnBrE,QAASC,EAAUoE,EAAVpE,OACpC,OACE,kBAAC,EAAD,CACEsG,IAAKC,EACL1G,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRkD,eAAgBA,EAChBjD,YAAa,SAACG,EAAKP,GAAN,OACX,EAAK4D,gBAAgBrD,EAAKP,IAE5BK,aAAc,SAACE,EAAKP,GAAN,OACZ,EAAK2G,iBAAiBpG,EAAKP,IAE7BM,UAAW,kBAAM,EAAKsG,cAAcrG,EAAKP,IACzCO,IAAKA,kB,GA/csBI,aA6d7C0D,EAA4B,SAACjB,EAAM7C,EAAKP,GAC5C,IAAMoE,EAAUhB,EAAKqB,QACfF,EAAOH,EAAQ7D,GAAKP,GAC1B,IAAKuE,EAAKrE,UAAYqE,EAAKtE,UAAYsE,EAAKpB,OAAQ,CAClD,IAAMiC,E,yVAAO,IACRb,EADQ,CAEXpE,QAASoE,EAAKpE,SAEhBiE,EAAQ7D,GAAKP,GAAOoF,EAEtB,OAAOhB,GCleMyC,MARf,WACE,OACE,yBAAKnG,UAAU,OACb,kBAAC,EAAD,QCKcoG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlD,SAASC,eAAe,SD2H3C,kBAAmBkD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.33f374e8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    \r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></td>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\n\nexport async function get_visited_path(credentials) {\n  try {\n    const res = await axios.post(\"http://127.0.0.1:8000/pathfinder/\", {\n      rows: credentials.rows,\n      columns: credentials.columns,\n      obstacles: credentials.obstacles,\n      start_x: credentials.start_x,\n      start_y: credentials.start_y,\n      target_x: credentials.target_x,\n      target_y: credentials.target_y,\n      algorithm: credentials.algorithm,\n    });\n    //   console.log(res.data);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport { get_visited_path } from \"../api/backend\";\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 5,\r\n      FINISH_NODE_ROW: 5,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 15,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, \r\n      currRow: 0,\r\n      currCol: 0,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const { grid } = this.state;\r\n\r\n      const obstacles = [];\r\n      \r\n      for (let x = 1; x <= grid.length; x++) { \r\n        for (let y = 1; y <= grid[0].length; y++) { \r\n          if (grid[x - 1][y - 1].isWall) { \r\n            obstacles.push({x, y});\r\n          }\r\n        }\r\n      }\r\n\r\n      const data = {\r\n        rows: this.state.ROW_COUNT,\r\n        columns: this.state.COLUMN_COUNT,\r\n        obstacles: obstacles,\r\n        start_x: this.state.START_NODE_ROW + 1,\r\n        start_y: this.state.START_NODE_COL + 1,\r\n        target_x: this.state.FINISH_NODE_ROW + 1,\r\n        target_y: this.state.FINISH_NODE_COL + 1,\r\n        algorithm: algo,\r\n      };\r\n\r\n      this.requestHandler(data);\r\n    }\r\n  }\r\n\r\n  async requestHandler(data) {\r\n    try {\r\n      const { visited, path } = await get_visited_path(data);\r\n\r\n      let visited_formatted = [];\r\n      let path_formatted = [];\r\n      let previous_visited_node;\r\n      let previous_path_node;\r\n\r\n      for (let i = 0; i < visited.length; i++) { \r\n        let newNode = this.createNode(visited[i][0] - 1, visited[i][1] - 1);\r\n        if (i !== 0) { \r\n          newNode.previousNode = previous_visited_node;\r\n        }\r\n        previous_visited_node = newNode;\r\n        visited_formatted.push(newNode);\r\n      }\r\n\r\n      for (let i = 0; i < path.length; i++) { \r\n        let newNode = this.createNode(path[i][0] - 1, path[i][1] - 1);\r\n        if (i !== 0) { \r\n          newNode.previousNode = previous_path_node;\r\n        }\r\n        previous_path_node = newNode;\r\n        path_formatted.push(newNode);\r\n      }\r\n      path_formatted.push('end');\r\n      \r\n      this.animate(visited_formatted, path_formatted);\r\n    }catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <b>PathFinding Visualizer</b>\r\n          </a>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <a\r\n                  className=\"nav-link\"\r\n                  href=\"https://github.com/cdoos/Pathfinding-Visualizer\">\r\n                  {' '}Source code{' '}\r\n                  <img\r\n                    src=\"https://github.githubassets.com/images/modules/logos_page/Octocat.png\"\r\n                    alt=\"GitHub Logo\"\r\n                    style={{ width: '25px', height: '25px' }}\r\n                  />\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n        <br />\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('Dijkstra')}>\r\n          Dijkstra's\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('AStar')}>\r\n          A*\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('bfs')}>\r\n          Breadth-First Search\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('dfs')}>\r\n          Depth-First Search\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning\"\r\n          onClick={() => this.clearWalls()}>\r\n          Clear Walls\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          onClick={() => this.clearGrid()}>\r\n          Clear Grid\r\n        </button>\r\n        <table\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <tbody className=\"grid\">\r\n            {grid.map((row, rowIndex) => {\r\n              return (\r\n                <tr key={rowIndex}>\r\n                  {row.map((node, nodeIndex) => {\r\n                    const {row, col, isFinish, isStart, isWall} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIndex}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}>\r\n                      </Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}